import Unit from './unit.js';
import { curry1, isVoid } from './-private/utils.js';
import * as Toolbelt from './toolbelt.js';
export const Variant = {
    Ok: 'Ok',
    Err: 'Err',
};
class ResultImpl {
    constructor(repr) {
        this.repr = repr;
    }
    static ok(value) {
        return isVoid(value)
            ? new ResultImpl(['Ok', Unit])
            : new ResultImpl(['Ok', value]);
    }
    static err(error) {
        return isVoid(error)
            ? new ResultImpl(['Err', Unit])
            : new ResultImpl(['Err', error]);
    }
    get variant() {
        return this.repr[0];
    }
    get value() {
        if (this.repr[0] === Variant.Err) {
            throw new Error('Cannot get the value of Err');
        }
        return this.repr[1];
    }
    get error() {
        if (this.repr[0] === Variant.Ok) {
            throw new Error('Cannot get the error of Ok');
        }
        return this.repr[1];
    }
    get isOk() {
        return this.repr[0] === Variant.Ok;
    }
    get isErr() {
        return this.repr[0] === Variant.Err;
    }
    map(mapFn) {
        return map(mapFn, this);
    }
    mapOr(orU, mapFn) {
        return mapOr(orU, mapFn, this);
    }
    mapOrElse(orElseFn, mapFn) {
        return mapOrElse(orElseFn, mapFn, this);
    }
    match(matcher) {
        return match(matcher, this);
    }
    mapErr(mapErrFn) {
        return mapErr(mapErrFn, this);
    }
    or(orResult) {
        return or(orResult, this);
    }
    orElse(orElseFn) {
        return orElse(orElseFn, this);
    }
    and(mAnd) {
        return and(mAnd, this);
    }
    andThen(andThenFn) {
        return andThen(andThenFn, this);
    }
    unwrapOr(defaultValue) {
        return unwrapOr(defaultValue, this);
    }
    unwrapOrElse(elseFn) {
        return unwrapOrElse(elseFn, this);
    }
    toMaybe() {
        return Toolbelt.toMaybe(this);
    }
    toString() {
        return toString(this);
    }
    toJSON() {
        return toJSON(this);
    }
    equals(comparison) {
        return equals(comparison, this);
    }
    ap(r) {
        return ap(this, r);
    }
}
export function tryOr(error, callback) {
    const op = (cb) => {
        try {
            return ok(cb());
        }
        catch {
            return err(error);
        }
    };
    return curry1(op, callback);
}
export const ok = ResultImpl.ok;
export const err = ResultImpl.err;
export function tryOrElse(onError, callback) {
    const op = (cb) => {
        try {
            return ok(cb());
        }
        catch (e) {
            return err(onError(e));
        }
    };
    return curry1(op, callback);
}
export function map(mapFn, result) {
    const op = (r) => (r.isOk ? ok(mapFn(r.value)) : r);
    return curry1(op, result);
}
export function mapOr(orU, mapFn, result) {
    function fullOp(fn, r) {
        return r.isOk ? fn(r.value) : orU;
    }
    function partialOp(fn, curriedResult) {
        return curriedResult !== undefined
            ? fullOp(fn, curriedResult)
            : (extraCurriedResult) => fullOp(fn, extraCurriedResult);
    }
    return mapFn === undefined
        ? partialOp
        : result === undefined
            ? partialOp(mapFn)
            : partialOp(mapFn, result);
}
export function mapOrElse(orElseFn, mapFn, result) {
    function fullOp(fn, r) {
        return r.isOk ? fn(r.value) : orElseFn(r.error);
    }
    function partialOp(fn, curriedResult) {
        return curriedResult !== undefined
            ? fullOp(fn, curriedResult)
            : (extraCurriedResult) => fullOp(fn, extraCurriedResult);
    }
    return mapFn === undefined
        ? partialOp
        : result === undefined
            ? partialOp(mapFn)
            : partialOp(mapFn, result);
}
export function mapErr(mapErrFn, result) {
    const op = (r) => (r.isOk ? r : err(mapErrFn(r.error)));
    return curry1(op, result);
}
export function and(andResult, result) {
    const op = (r) => (r.isOk ? andResult : err(r.error));
    return curry1(op, result);
}
export function andThen(thenFn, result) {
    const op = (r) => (r.isOk ? thenFn(r.value) : err(r.error));
    return curry1(op, result);
}
export function or(defaultResult, result) {
    const op = (r) => (r.isOk ? ok(r.value) : defaultResult);
    return curry1(op, result);
}
export function orElse(elseFn, result) {
    const op = (r) => (r.isOk ? ok(r.value) : elseFn(r.error));
    return curry1(op, result);
}
export function unwrapOr(defaultValue, result) {
    const op = (r) => (r.isOk ? r.value : defaultValue);
    return curry1(op, result);
}
export function unwrapOrElse(orElseFn, result) {
    const op = (r) => (r.isOk ? r.value : orElseFn(r.error));
    return curry1(op, result);
}
export function fromMaybe(errValue, maybe) {
    const op = (m) => (m.isJust ? ok(m.value) : err(errValue));
    return curry1(op, maybe);
}
export const toString = (result) => {
    const body = (result.isOk ? result.value : result.error).toString();
    return `${result.variant.toString()}(${body})`;
};
export const toJSON = (result) => {
    return result.isOk
        ? { variant: result.variant, value: result.value }
        : { variant: result.variant, error: result.error };
};
export function match(matcher, result) {
    const op = (r) => mapOrElse(matcher.Err, matcher.Ok, r);
    return curry1(op, result);
}
export function equals(resultB, resultA) {
    return resultA !== undefined
        ? resultA.match({
            Err: () => resultB.isErr,
            Ok: (a) => resultB.isOk && resultB.value === a,
        })
        : (curriedResultA) => curriedResultA.match({
            Err: () => resultB.isErr,
            Ok: (a) => resultB.isOk && resultB.value === a,
        });
}
export function ap(resultFn, result) {
    const op = (r) => r.andThen((val) => resultFn.map((fn) => fn(val)));
    return curry1(op, result);
}
export function isInstance(item) {
    return item instanceof ResultImpl;
}
export function transposeMaybe(maybe) {
    return Toolbelt.transposeMaybe(maybe);
}
export function toMaybe(result) {
    return Toolbelt.toMaybe(result);
}
export const Result = ResultImpl;
export default Result;
//# sourceMappingURL=result.js.map