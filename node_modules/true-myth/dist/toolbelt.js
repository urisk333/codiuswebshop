import Result from './result.js';
import Maybe from './maybe.js';
import { curry1 } from './-private/utils.js';
export function transposeResult(result) {
    return result.match({
        Ok: (maybe) => maybe.match({
            Just: (v) => Maybe.just(Result.ok(v)),
            Nothing: () => Maybe.nothing(),
        }),
        Err: (e) => Maybe.just(Result.err(e)),
    });
}
export function toMaybe(result) {
    return result.isOk ? Maybe.just(result.value) : Maybe.nothing();
}
export function fromMaybe(errValue, maybe) {
    const op = (m) => (m.isJust ? Result.ok(m.value) : Result.err(errValue));
    return curry1(op, maybe);
}
export function transposeMaybe(maybe) {
    return maybe.match({
        Just: (result) => result.match({
            Ok: (v) => Result.ok(Maybe.just(v)),
            Err: (e) => Result.err(e),
        }),
        Nothing: () => Result.ok(Maybe.nothing()),
    });
}
export function toOkOrErr(error, maybe) {
    const op = (m) => (m.isJust ? Result.ok(m.value) : Result.err(error));
    return maybe !== undefined ? op(maybe) : op;
}
export function toOkOrElseErr(elseFn, maybe) {
    const op = (m) => (m.isJust ? Result.ok(m.value) : Result.err(elseFn()));
    return curry1(op, maybe);
}
export function fromResult(result) {
    return result.isOk ? Maybe.just(result.value) : Maybe.nothing();
}
//# sourceMappingURL=toolbelt.js.map